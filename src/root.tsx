// @refresh reload
import { Suspense, createEffect, createSignal, onMount } from "solid-js";
import {
  useLocation,
  Body,
  ErrorBoundary,
  FileRoutes,
  Head,
  Html,
  Meta,
  Routes,
  Scripts,
  Title,
  Link,
} from "solid-start";
import "./root.css";
import Header from "./components/Header";
import Banner from "./components/Banner";
import {
  configureChains,
  createConfig,
  mainnet,
  getAccount,
  connect,
} from "@wagmi/core";
import { publicProvider } from "@wagmi/core/providers/public";
import { setConnected } from "./components/ConnectButton";
import { WalletConnectConnector } from "@wagmi/core/connectors/walletConnect";

export const metadata = {
  title: "Pixels",
  description: "Generated by create next app",
};

export const navigation = [
  {
    name: "Market",
    url: "/market",
  },
  { name: "Proposals", url: "/proposals" },
  { name: "Create", url: "/create" },
];

const { chains, publicClient, webSocketPublicClient } = configureChains(
  [mainnet],
  [publicProvider()]
);

const config = createConfig({
  autoConnect: true,
  publicClient,
  webSocketPublicClient,
});

export default function Root() {
  const [backgroundPosition, setBackgroundPosition] = createSignal("16px 0px");
  const location = useLocation();

  createEffect(() => {
    function mouseMoveHandler(e: MouseEvent) {
      if (location.pathname === "/") {
        setBackgroundPosition(`${e.clientX + 16}px ${e.clientY}px`);
      }
    }

    window.addEventListener("mousemove", mouseMoveHandler);

    return () => window.removeEventListener("mousemove", mouseMoveHandler);
  });

  onMount(async () => {
    const account = getAccount();

    if (!account.isConnected) {
      const { account } = await connect({
        connector: new WalletConnectConnector({
          options: {
            projectId: "9e080c458781a9a2d4c42149c5f02972",
          },
        }),
      });

      if (account) setConnected(true);
    }
  });

  return (
    <Html lang="en">
      <Head>
        <Title>Pixels</Title>
        <Meta charset="utf-8" />
        <Meta name="viewport" content="width=device-width, initial-scale=1" />
        <Link rel="icon" type="image/svg" href="/logo.svg" />
      </Head>
      <Body
        style={{
          "background-position": backgroundPosition(),
          // "background-image": location.pathname === "/" ? "url(/tile.svg)" : "",
        }}
        class="flex flex-col bg-[url(/tile.svg)] [background-size:50px]"
      >
        <Suspense>
          <ErrorBoundary>
            <Header />
            <Routes>
              <FileRoutes />
            </Routes>
          </ErrorBoundary>
        </Suspense>
        <Scripts />
      </Body>
    </Html>
  );
}
